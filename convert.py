import requests
import json
import os
import urllib.parse

#TODO: Create icons for the shortcuts. 

ExtensionsFolder = "./Extensions"
OutputFolder     = "./Output"



def sanitize_filename(filename):
# This function is generated by OpenAI GPT-3 because of time constraints.
    import string
    """
    Removes all characters that are not supported as Windows filenames.

    Args:
        filename (str): The filename to sanitize.

    Returns:
        str: The sanitized filename.
    """
    valid_chars = "-_.() %s%s" % (string.ascii_letters, string.digits)
    sanitized_filename = ''.join(c for c in filename if c in valid_chars)
    return sanitized_filename



def fetchIcon(manifest, folderPath):
    iconPath = folderPath.replace("manifest.json","")
    iconPath = iconPath+"\\icons\\256.png"
    # icons = manifest["icons"]["256"]
    return iconPath
    print()

    


def convertToShortcut(manifest):
    filename = sanitize_filename(manifest["name"])
    with open(OutputFolder+"\\"+filename+".ink", "a+") as file:
        thingToWrite = ("""
        [InternetShortcut]
        URL={}
        """).format(manifest["app"]["launch"]["web_url"])
        file.write(thingToWrite)
        # file.write("""
        # [InternetShortcut]
        # URL={}
        # IconFile=C:\Users\tov\AppData\Local\Vivaldi\Application\vivaldi.exe
        # """).format(manifest["app"]["launch"]["web_url"])
        # print()


from glob import glob

if not os.path.exists(ExtensionsFolder):
    ExtensionsFolder = "%localappdata%\google\Chrome\user data\Default\Extensions"


result = [y for x in os.walk(ExtensionsFolder) for y in glob(os.path.join(x[0], 'manifest.json'))]

if not os.path.exists(OutputFolder):
    os.mkdir(OutputFolder)


for entry in result:
    with open(entry) as file:
        try:
            manifest = json.load(file)
            # localIcon = fetchIcon(manifest=manifest, folderPath=entry)
            convertToShortcut(manifest)
        except KeyError:
            pass
        # print()

# print(result)